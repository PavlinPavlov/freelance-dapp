import {Injectable} from '@angular/core';
import {BigNumber, Contract, ethers} from 'ethers';
import {PaymentChannel} from '../models/payment-channel.model';
import {EventModel} from '../models/eventModel';

@Injectable({
  providedIn: 'root'
})
export class BlockchainService {

  private readonly windowEthereum: any;

  // TODO extract this to a config file
  private _abi = '[{"inputs":[{"internalType":"address payable","name":"_recipient","type":"address"},{"internalType":"string","name":"_title","type":"string"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256","name":"_deadline","type":"uint256"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Closed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"balance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimTimeout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimedAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimedNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deadline","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"metadata","outputs":[{"internalType":"string","name":"title","type":"string"},{"internalType":"string","name":"description","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recipient","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"message","type":"bytes32"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"recoverSigner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"}]'
  private _bytecode = '0x608060405260405162001f2838038062001f2883398181016040528101906200002991906200041a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346004819055506000600581905550600060068190555080600781905550604051806040016040528084815260200183815250600080820151816000019081620000f691906200070b565b5060208201518160010190816200010e91906200070b565b50905050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f587ece4cd19692c5be1a4184503d607d45542d2aca0698c0068f52e09ccb541c60405160405180910390a3347f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea60405160405180910390a250505050620007f2565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022882620001fb565b9050919050565b6200023a816200021b565b81146200024657600080fd5b50565b6000815190506200025a816200022f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002b5826200026a565b810181811067ffffffffffffffff82111715620002d757620002d66200027b565b5b80604052505050565b6000620002ec620001e7565b9050620002fa8282620002aa565b919050565b600067ffffffffffffffff8211156200031d576200031c6200027b565b5b62000328826200026a565b9050602081019050919050565b60005b838110156200035557808201518184015260208101905062000338565b60008484015250505050565b6000620003786200037284620002ff565b620002e0565b90508281526020810184848401111562000397576200039662000265565b5b620003a484828562000335565b509392505050565b600082601f830112620003c457620003c362000260565b5b8151620003d684826020860162000361565b91505092915050565b6000819050919050565b620003f481620003df565b81146200040057600080fd5b50565b6000815190506200041481620003e9565b92915050565b60008060008060808587031215620004375762000436620001f1565b5b6000620004478782880162000249565b945050602085015167ffffffffffffffff8111156200046b576200046a620001f6565b5b6200047987828801620003ac565b935050604085015167ffffffffffffffff8111156200049d576200049c620001f6565b5b620004ab87828801620003ac565b9250506060620004be8782880162000403565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200051d57607f821691505b602082108103620005335762000532620004d5565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200059d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200055e565b620005a986836200055e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005ec620005e6620005e084620003df565b620005c1565b620003df565b9050919050565b6000819050919050565b6200060883620005cb565b620006206200061782620005f3565b8484546200056b565b825550505050565b600090565b6200063762000628565b62000644818484620005fd565b505050565b5b818110156200066c57620006606000826200062d565b6001810190506200064a565b5050565b601f821115620006bb57620006858162000539565b62000690846200054e565b81016020851015620006a0578190505b620006b8620006af856200054e565b83018262000649565b50505b505050565b600082821c905092915050565b6000620006e060001984600802620006c0565b1980831691505092915050565b6000620006fb8383620006cd565b9150826002028217905092915050565b6200071682620004ca565b67ffffffffffffffff8111156200073257620007316200027b565b5b6200073e825462000504565b6200074b82828562000670565b600060209050601f8311600181146200078357600084156200076e578287015190505b6200077a8582620006ed565b865550620007ea565b601f198416620007938662000539565b60005b82811015620007bd5784890151825560018201915060208501945060208101905062000796565b86831015620007dd5784890151620007d9601f891682620006cd565b8355505b6001600288020188555050505b505050505050565b61172680620008026000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101265780639668ceb81461014457806397aba7f914610162578063b69ef8a814610192578063d425f074146101b05761009e565b80630e1da6c3146100a35780631cecae3a146100ad57806329dcb0cf146100cb578063392f37e9146100e957806366d003ac14610108575b600080fd5b6100ab6101cc565b005b6100b5610330565b6040516100c29190610b36565b60405180910390f35b6100d3610336565b6040516100e09190610b36565b60405180910390f35b6100f161033c565b6040516100ff929190610be1565b60405180910390f35b61011061045e565b60405161011d9190610c59565b60405180910390f35b61012e610484565b60405161013b9190610c59565b60405180910390f35b61014c6104aa565b6040516101599190610b36565b60405180910390f35b61017c60048036038101906101779190610df3565b6104b0565b6040516101899190610e70565b60405180910390f35b61019a6104cd565b6040516101a79190610b36565b60405180910390f35b6101ca60048036038101906101c59190610eb7565b6104d3565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022657600080fd5b6000429050600754811161026f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690610f72565b60405180910390fd5b6000479050600081116102b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ae90610fde565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156102fd573d6000803e3d6000fd5b5080827fbb1c869dafbabf53b7b5a50e7864066365b4c5d1bcfa0220f75cc2a2acfb44f660405160405180910390a35050565b60065481565b60075481565b600080600001805461034d9061102d565b80601f01602080910402602001604051908101604052809291908181526020018280546103799061102d565b80156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b5050505050908060010180546103db9061102d565b80601f01602080910402602001604051908101604052809291908181526020018280546104079061102d565b80156104545780601f1061042957610100808354040283529160200191610454565b820191906000526020600020905b81548152906001019060200180831161043757829003601f168201915b5050505050905082565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60006104c5828461082d90919063ffffffff16565b905092915050565b60045481565b6000600554836104e3919061108d565b905060075442111561052a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105219061110d565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b19061119f565b60405180910390fd5b60055483116105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f59061120b565b60405180910390fd5b600454811115610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90611277565b60405180910390fd5b6006548211610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e906112e3565b60405180910390fd5b60006106bc3085856040516020016106a19392919061136c565b60405160208183030381529060405280519060200120610854565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661070182876104b0565b73ffffffffffffffffffffffffffffffffffffffff1614610757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074e906113f5565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156107bf573d6000803e3d6000fd5b5081600460008282546107d2919061108d565b9250508190555083600560008282546107eb9190611415565b9250508190555082600681905550837f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b5660405160405180910390a25050505050565b600080600061083c8585610884565b91509150610849816108d5565b819250505092915050565b60008160405160200161086791906114c1565b604051602081830303815290604052805190602001209050919050565b60008060418351036108c55760008060006020860151925060408601519150606086015160001a90506108b987828585610a3b565b945094505050506108ce565b60006002915091505b9250929050565b600060048111156108e9576108e86114e7565b5b8160048111156108fc576108fb6114e7565b5b0315610a385760016004811115610916576109156114e7565b5b816004811115610929576109286114e7565b5b03610969576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096090611562565b60405180910390fd5b6002600481111561097d5761097c6114e7565b5b8160048111156109905761098f6114e7565b5b036109d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c7906115ce565b60405180910390fd5b600360048111156109e4576109e36114e7565b5b8160048111156109f7576109f66114e7565b5b03610a37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2e90611660565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a76576000600391509150610b14565b600060018787878760405160008152602001604052604051610a9b94939291906116ab565b6020604051602081039080840390855afa158015610abd573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b0b57600060019250925050610b14565b80600092509250505b94509492505050565b6000819050919050565b610b3081610b1d565b82525050565b6000602082019050610b4b6000830184610b27565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b8b578082015181840152602081019050610b70565b60008484015250505050565b6000601f19601f8301169050919050565b6000610bb382610b51565b610bbd8185610b5c565b9350610bcd818560208601610b6d565b610bd681610b97565b840191505092915050565b60006040820190508181036000830152610bfb8185610ba8565b90508181036020830152610c0f8184610ba8565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4382610c18565b9050919050565b610c5381610c38565b82525050565b6000602082019050610c6e6000830184610c4a565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c9b81610c88565b8114610ca657600080fd5b50565b600081359050610cb881610c92565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0082610b97565b810181811067ffffffffffffffff82111715610d1f57610d1e610cc8565b5b80604052505050565b6000610d32610c74565b9050610d3e8282610cf7565b919050565b600067ffffffffffffffff821115610d5e57610d5d610cc8565b5b610d6782610b97565b9050602081019050919050565b82818337600083830152505050565b6000610d96610d9184610d43565b610d28565b905082815260208101848484011115610db257610db1610cc3565b5b610dbd848285610d74565b509392505050565b600082601f830112610dda57610dd9610cbe565b5b8135610dea848260208601610d83565b91505092915050565b60008060408385031215610e0a57610e09610c7e565b5b6000610e1885828601610ca9565b925050602083013567ffffffffffffffff811115610e3957610e38610c83565b5b610e4585828601610dc5565b9150509250929050565b6000610e5a82610c18565b9050919050565b610e6a81610e4f565b82525050565b6000602082019050610e856000830184610e61565b92915050565b610e9481610b1d565b8114610e9f57600080fd5b50565b600081359050610eb181610e8b565b92915050565b600080600060608486031215610ed057610ecf610c7e565b5b600084013567ffffffffffffffff811115610eee57610eed610c83565b5b610efa86828701610dc5565b9350506020610f0b86828701610ea2565b9250506040610f1c86828701610ea2565b9150509250925092565b7f436f6e7472616374207374696c6c206f70656e65642100000000000000000000600082015250565b6000610f5c601683610b5c565b9150610f6782610f26565b602082019050919050565b60006020820190508181036000830152610f8b81610f4f565b9050919050565b7f4e6f2066756e647320617661696c61626c652100000000000000000000000000600082015250565b6000610fc8601383610b5c565b9150610fd382610f92565b602082019050919050565b60006020820190508181036000830152610ff781610fbb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061104557607f821691505b60208210810361105857611057610ffe565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061109882610b1d565b91506110a383610b1d565b92508282039050818111156110bb576110ba61105e565b5b92915050565b7f436f6e7472616374206e6f74206f70656e656421000000000000000000000000600082015250565b60006110f7601483610b5c565b9150611102826110c1565b602082019050919050565b60006020820190508181036000830152611126816110ea565b9050919050565b7f53656e646572206973206e6f7420636f6e74726163742072656365697069656e60008201527f7421000000000000000000000000000000000000000000000000000000000000602082015250565b6000611189602283610b5c565b91506111948261112d565b604082019050919050565b600060208201905081810360008301526111b88161117c565b9050919050565b7f416d6f756e74202d20636c61696d6564206973206e6f203e207468616e203021600082015250565b60006111f5602083610b5c565b9150611200826111bf565b602082019050919050565b60006020820190508181036000830152611224816111e8565b9050919050565b7f496e73756666696369656e742062616c616e6365210000000000000000000000600082015250565b6000611261601583610b5c565b915061126c8261122b565b602082019050919050565b6000602082019050818103600083015261129081611254565b9050919050565b7f4e6f6e636520616c726561647920636c61696d65642100000000000000000000600082015250565b60006112cd601683610b5c565b91506112d882611297565b602082019050919050565b600060208201905081810360008301526112fc816112c0565b9050919050565b60008160601b9050919050565b600061131b82611303565b9050919050565b600061132d82611310565b9050919050565b61134561134082610e4f565b611322565b82525050565b6000819050919050565b61136661136182610b1d565b61134b565b82525050565b60006113788286611334565b6014820191506113888285611355565b6020820191506113988284611355565b602082019150819050949350505050565b7f5369676e6174757265206e6f742076616c756564210000000000000000000000600082015250565b60006113df601583610b5c565b91506113ea826113a9565b602082019050919050565b6000602082019050818103600083015261140e816113d2565b9050919050565b600061142082610b1d565b915061142b83610b1d565b92508282019050808211156114435761144261105e565b5b92915050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061148a601c83611449565b915061149582611454565b601c82019050919050565b6000819050919050565b6114bb6114b682610c88565b6114a0565b82525050565b60006114cc8261147d565b91506114d882846114aa565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061154c601883610b5c565b915061155782611516565b602082019050919050565b6000602082019050818103600083015261157b8161153f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006115b8601f83610b5c565b91506115c382611582565b602082019050919050565b600060208201905081810360008301526115e7816115ab565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061164a602283610b5c565b9150611655826115ee565b604082019050919050565b600060208201905081810360008301526116798161163d565b9050919050565b61168981610c88565b82525050565b600060ff82169050919050565b6116a58161168f565b82525050565b60006080820190506116c06000830187611680565b6116cd602083018661169c565b6116da6040830185611680565b6116e76060830184611680565b9594505050505056fea2646970667358221220435c2aa0f6e5318ddbab9e273ef5c11647e63478eef168b96d8e9a78689bb8ce64736f6c63430008130033'
  private _logTag = '[BCS]'
  private _provider: ethers.providers.Web3Provider;
  private _signer: ethers.providers.JsonRpcSigner;

  constructor() {
    this.windowEthereum = (window as any).ethereum;

    if (!this.windowEthereum) {
      alert('Please install MetaMask!');
      throw new Error('No window.ethereum available');
    }

    this.windowEthereum.request({method: 'eth_requestAccounts'});
    this._provider = new ethers.providers.Web3Provider(this.windowEthereum);
    this._signer = this._provider.getSigner();

    // Listen for account changes
    this.windowEthereum.on('accountsChanged', (accounts: string[]) => {
      console.log('Account Changed:', accounts[0]);
      // TODO implement with route
      location.reload();
      this._provider = new ethers.providers.Web3Provider(this.windowEthereum);
      this._signer = this._provider.getSigner();
    });

  }

  public async fromAddress(address: string): Promise<Contract & PaymentChannel> {
    return new ethers.Contract(address, this._abi, this._signer) as unknown as Contract & PaymentChannel;
  }

  public async getBalance(address: string): Promise<BigNumber> {
    return await this._provider.getBalance(address);
  }

  public async deployContract(
    recipient: string,
    title: string,
    description: string,
    amountWei: BigNumber,
    deadline: string
  ): Promise<Contract & PaymentChannel> {
    const unixTime = Math.floor(Date.parse(deadline) / 1000)
    const factory = new ethers.ContractFactory(this._abi, this._bytecode, this.getSigner());
    const contract = await factory.deploy(recipient, title, description, unixTime, {
      value: amountWei
    });

    console.info(this._logTag + ' Deploying contract at ' + contract.address)
    await contract.deployed();
    console.info(this._logTag + ' Contract deployed at ' + contract.address)

    return contract as unknown as Contract & PaymentChannel;
  }

  public getSigner(): ethers.providers.JsonRpcSigner {
    return this._signer;
  }

  async getAllEvents(address: string) {
    console.time('getAllEvents'); // Start timer

    const contract = await this.fromAddress(address);

    const [createdEvents,
      depositedEvents,
      withdrawnEvents,
      closedEvents
    ] = await Promise.all([
      this.getCreatedEvents(contract),
      this.getDepositedEvents(contract),
      this.getWithdrawnEvents(contract),
      this.getClosedEvents(contract)
    ]);

    const allEvents = [
      ...createdEvents,
      ...depositedEvents,
      ...withdrawnEvents,
      ...closedEvents
    ];

    const blockPromises = allEvents.map(event => event.getBlock());
    const blocks = await Promise.all(blockPromises);

    const eventModels = blocks.map(
      (block, index) =>
        new EventModel(block.timestamp, allEvents[index].blockNumber, '')
    );

    console.timeEnd('getAllEvents'); // End timer

    return eventModels;
  }

  // TODO Check how to do without any cast
  private getWithdrawnEvents(contract: Contract & PaymentChannel): Promise<Array<ethers.Event>> {
    return contract.queryFilter((contract.filters as any).Withdrawn());
  }

  private getDepositedEvents(contract: Contract & PaymentChannel): Promise<Array<ethers.Event>> {
    return contract.queryFilter((contract.filters as any).Deposited());
  }

  private getClosedEvents(contract: Contract & PaymentChannel): Promise<Array<ethers.Event>> {
    return contract.queryFilter((contract.filters as any).Closed());
  }

  private getCreatedEvents(contract: Contract & PaymentChannel): Promise<Array<ethers.Event>> {
    return contract.queryFilter((contract.filters as any).Created());
  }

}
